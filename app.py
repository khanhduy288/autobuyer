import json
import time
import pyautogui
import webbrowser
import os
import shutil
import cv2
import numpy as np
import requests
from datetime import datetime
from flask import Flask, request, jsonify, render_template, redirect

app = Flask(__name__)

IMG_PATH = "static/images/"
WORKFLOW_FILE = "workflow.json"

# ƒë·∫£m b·∫£o th∆∞ m·ª•c ·∫£nh t·ªìn t·∫°i
os.makedirs(IMG_PATH, exist_ok=True)
TOKEN = "8399603454:AAFYyIAFPiV8REr-2uYwsEzJax0YgSX1frU"
CHAT_ID = -4948414512  # ID group "Th√¥ng b√°o ƒë∆°n h√†ng"

def send_telegram_message(text):
    """G·ª≠i tin nh·∫Øn v·ªÅ Telegram group"""
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": text}
    try:
        res = requests.post(url, json=payload, timeout=5)
        print("üì© G·ª≠i Telegram:", res.json())
    except Exception as e:
        print("‚ö†Ô∏è L·ªói g·ª≠i Telegram:", e)

def backup_workflow():
    """T·∫°o b·∫£n sao l∆∞u workflow tr∆∞·ªõc khi ghi ƒë√®"""
    if os.path.exists(WORKFLOW_FILE):
        ts = datetime.now().strftime("%Y%m%d%H%M%S")
        bak_name = WORKFLOW_FILE + f".bak.{ts}"
        shutil.copy(WORKFLOW_FILE, bak_name)
        print(f"üîñ Backup workflow -> {bak_name}")


def find_image_pos(image_path, confidence=0.9, timeout=5):
    """T√¨m ·∫£nh v√† tr·∫£ v·ªÅ t·ªça ƒë·ªô t√¢m (x,y), None n·∫øu kh√¥ng t√¨m th·∫•y"""
    full = os.path.join(IMG_PATH, image_path)
    if not os.path.exists(full):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file ·∫£nh {full}")
        return None

    start = time.time()
    while time.time() - start < timeout:
        screenshot = pyautogui.screenshot()
        screenshot = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)

        template = cv2.imread(full, cv2.IMREAD_COLOR)
        if template is None:
            return None

        h, w = template.shape[:2]
        res = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)
        _, max_val, _, max_loc = cv2.minMaxLoc(res)

        if max_val >= confidence:
            center_x = max_loc[0] + w // 2
            center_y = max_loc[1] + h // 2
            return (center_x, center_y)
        time.sleep(0.3)
    return None


def find_and_click(image_path, confidence=0.87, timeout=10):
    """T√¨m ·∫£nh b·∫±ng OpenCV v√† click"""
    full = os.path.join(IMG_PATH, image_path)
    if not os.path.exists(full):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file ·∫£nh {full}")
        return False

    start = time.time()
    while time.time() - start < timeout:
        # ch·ª•p m√†n h√¨nh
        screenshot = pyautogui.screenshot()
        screenshot = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)

        template = cv2.imread(full, cv2.IMREAD_COLOR)
        if template is None:
            print(f"‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh template {full}")
            return False

        h, w = template.shape[:2]

        res = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)
        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)

        if max_val >= confidence:
            center_x = max_loc[0] + w // 2
            center_y = max_loc[1] + h // 2
            pyautogui.click(center_x, center_y)
            print(f"‚úÖ OpenCV Click {image_path} t·∫°i ({center_x},{center_y}), match={max_val:.2f}")
            time.sleep(1)
            return True
        else:
            print(f"‚ö†Ô∏è Ch∆∞a th·∫•y {image_path}, ƒë·ªô kh·ªõp={max_val:.2f}, retry...")
            time.sleep(0.5)
    return False


def run_from_json(json_file):
    """Ch·∫°y workflow t·ª´ file JSON. H·ªó tr·ª£ wait_and_click_image, restart_after, loop_to."""
    with open(json_file, "r", encoding="utf-8") as f:
        steps = json.load(f)

    i = 0
    while i < len(steps):
        step = steps[i]
        action = step.get("action")
        print(f"[RUN] Action: {action} -> {step}")

        if action == "open_url":
            url = step.get("url")
            if url:
                webbrowser.open(url)
                print(f"üåê Open URL: {url}")
            time.sleep(1)
            i += 1

        elif action == "scroll":
            px = step.get("px", 500)
            screen_w, screen_h = pyautogui.size()
            pyautogui.moveTo(screen_w // 2, screen_h // 2)
            pyautogui.scroll(-px)
            print(f"üñ± Scroll xu·ªëng {px}px")
            time.sleep(1)
            i += 1
            
        elif action == "hotkey":
            keys = step.get("keys", [])
            if keys:
                pyautogui.hotkey(*keys)
                print(f"üëâ Nh·∫•n t·ªï h·ª£p ph√≠m: {' + '.join(keys)}")
            else:
                print("‚ö†Ô∏è Kh√¥ng c√≥ ph√≠m n√†o ƒë·ªÉ nh·∫•n trong action hotkey")
            i += 1   # ƒë·ªÉ sang b∆∞·ªõc ti·∫øp theo

        elif action == "wait_and_click_image":
            image = step.get("image")
            retry_interval = step.get("retry_interval", 2)
            timeout_single = step.get("timeout_single", 2)
            threshold = step.get("threshold", 0.96)  # m·∫∑c ƒë·ªãnh 0.96 n·∫øu kh√¥ng truy·ªÅn

            print(f"üîÑ Ch·ªù v√† click {image} (threshold={threshold})...")

            fail_count = 0  # ƒë·∫øm s·ªë l·∫ßn th·∫•t b·∫°i li√™n ti·∫øp
            while True:
                if find_and_click(image, timeout=timeout_single, confidence=threshold):
                    print(f"‚úÖ ƒê√£ click ƒë∆∞·ª£c {image}")
                    break
                else:
                    fail_count += 1
                    print(f"‚ö†Ô∏è Kh√¥ng th·∫•y {image} (fail={fail_count}), retry sau {retry_interval}s...")
                    time.sleep(retry_interval)

                    # n·∫øu fail 2 l·∫ßn th√¨ F5 v√† reset i = 1
                    if fail_count >= 2:
                        print("üîÑ Kh√¥ng th·∫•y ·∫£nh 2 l·∫ßn => F5 l·∫°i trang v√† restart workflow...")
                        pyautogui.press("f5")
                        time.sleep(5)  # ƒë·ª£i trang load
                        i = 0  # reset v·ªÅ ƒë·∫ßu workflow (v√¨ cu·ªëi loop c√≥ i += 1, n√™n i=0 -> s·∫Ω th√†nh 1)
                        break

            i += 1


        elif action == "click_image":
            image = step.get("image")
            threshold = step.get("threshold", 0.96)  # m·∫∑c ƒë·ªãnh 0.96
            print(f"üîò Click image {image} (threshold={threshold})")
            if not find_and_click(image, timeout=10, confidence=threshold):
                return f"‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh {image}"
            i += 1

        elif action == "click_pos":
            x, y = step.get("x"), step.get("y")
            pyautogui.click(x, y)
            print(f"üñ± Click t·ªça ƒë·ªô ({x}, {y})")
            time.sleep(1)
            i += 1

        elif action == "click_offset":
            image = step.get("image")
            offset_x = step.get("x", 0)
            offset_y = step.get("y", 0)
            if image:
                pos = find_image_pos(image, timeout=5)
                if pos:
                    x, y = pos
                    pyautogui.click(x + offset_x, y + offset_y)
                    print(f"üñ± Click offset ({offset_x},{offset_y}) t·ª´ {image} t·∫°i ({x+offset_x},{y+offset_y})")
                else:
                    return f"‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh {image}"
            else:
                screen_w, screen_h = pyautogui.size()
                center_x, center_y = screen_w // 2, screen_h // 2
                pyautogui.click(center_x + offset_x, center_y + offset_y)
                print(f"üñ± Click offset t·ª´ center m√†n h√¨nh ({center_x+offset_x},{center_y+offset_y})")
            time.sleep(1)
            i += 1

        elif action == "input_text":
            text = step.get("text", "")
            print(f"‚å®Ô∏è Nh·∫≠p text: {text}")
            pyautogui.hotkey("ctrl", "a")
            time.sleep(0.5)
            pyautogui.press("delete")
            time.sleep(0.5)
            pyautogui.typewrite(text)
            time.sleep(0.8)
            i += 1

        elif action == "sleep":
            seconds = step.get("seconds", 3)
            print(f"‚è≥ Sleep {seconds}s...")
            time.sleep(seconds)
            i += 1

        elif action == "restart_after":
            seconds = step.get("seconds", 900)
            restart_url = step.get("url")
            print(f"‚è≥ Ch·ªù {seconds}s tr∆∞·ªõc khi restart workflow...")
            time.sleep(seconds)
            if restart_url:
                print(f"üîÑ M·ªü l·∫°i URL tr√™n tab hi·ªán t·∫°i: {restart_url}")
                if not find_and_click("url.png", timeout=5):
                    pyautogui.click(200, 50)  # fallback
                time.sleep(0.5)
                pyautogui.hotkey("ctrl", "a")
                pyautogui.typewrite(restart_url)
                pyautogui.press("enter")
            i += 1

        elif action == "keep_product":
            print("üëâ ƒêang gi·ªØ s·∫£n ph·∫©m...")

            # danh s√°ch ·∫£nh c·∫ßn click l·∫ßn l∆∞·ª£t
            product_images = [
                "huydon.png",
                "lydohuy1.png",
                "xacnhanhuy.png",
                "xacnhanhuy2.png",
                "themlaivaogio.png",
                "backlaigiohang.png",
                "mualai.png",
                "paypay1.png",
                "lendonlai.png"
            ]

            for img in product_images:
                print(f"üëâ ƒêang x·ª≠ l√Ω {img}...")
                while True:
                    try:
                        location = pyautogui.locateCenterOnScreen(
                            os.path.join(IMG_PATH, img), confidence=0.96
                        )
                        if location:
                            pyautogui.click(location)
                            print(f"‚úÖ Click v√†o {img} th√†nh c√¥ng")
                            time.sleep(3)
                            break  # tho√°t v√≤ng l·∫∑p, sang ·∫£nh ti·∫øp theo
                        else:
                            print(f"‚ö†Ô∏è Ch∆∞a th·∫•y {img}, retry sau 2s...")
                            time.sleep(2)
                    except Exception as e:
                        print(f"‚ùå L·ªói khi click {img}: {e}")
                        time.sleep(2)

            # ‚úÖ sau khi xong h·∫øt danh s√°ch ·∫£nh, tƒÉng i
            i += 1
            send_telegram_message("‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c gi·ªØ th√†nh c√¥ng!")


        elif action == "loop_to":
            target = step.get("index", 0)
            print(f"üîÅ Quay l·∫°i b∆∞·ªõc {target}")
            i = target  # nh·∫£y l·∫°i b∆∞·ªõc mong mu·ªën

        else:
            print(f"‚ö†Ô∏è Action ch∆∞a h·ªó tr·ª£: {action}")
            i += 1

    return "‚úÖ Workflow ho√†n t·∫•t!"


@app.route("/")
def index():
    current_url = ""
    current_quantity = 1  # m·∫∑c ƒë·ªãnh s·ªë l∆∞·ª£ng = 1

    if os.path.exists(WORKFLOW_FILE):
        try:
            with open(WORKFLOW_FILE, "r", encoding="utf-8") as f:
                steps = json.load(f)
            for step in steps:
                if step.get("action") == "restart_after":
                    current_url = step.get("url", "")
                if step.get("action") == "input_text":
                    # √©p th√†nh int an to√†n
                    try:
                        current_quantity = int(step.get("text", 1))
                    except:
                        current_quantity = 1
        except Exception as e:
            print("‚ö†Ô∏è L·ªói ƒë·ªçc workflow.json:", e)

    return render_template(
        "index.html",
        current_url=current_url,
        current_quantity=current_quantity,
        ma_sp_exists=os.path.exists(os.path.join(IMG_PATH, "ma_sp.png")),
        loai_sp_exists=os.path.exists(os.path.join(IMG_PATH, "loai_sp.png"))
    )

@app.route("/save", methods=["POST"])
def save_workflow():
    url = request.form.get("url")
    so_luong = request.form.get("so_luong")  # s·ªë l∆∞·ª£ng nh·∫≠p t·ª´ form
    file_ma = request.files.get("ma_sp")
    file_loai = request.files.get("loai_sp")

    # l∆∞u ·∫£nh n·∫øu c√≥ upload
    if file_ma:
        file_ma.save(os.path.join(IMG_PATH, "ma_sp.png"))
    if file_loai:
        file_loai.save(os.path.join(IMG_PATH, "loai_sp.png"))

    # √©p s·ªë l∆∞·ª£ng th√†nh int, default 1
    try:
        so_luong = str(max(1, int(so_luong)))
    except:
        so_luong = "1"

    # ƒë·ªçc workflow.json
    if not os.path.exists(WORKFLOW_FILE):
        return "‚ùå workflow.json ch∆∞a t·ªìn t·∫°i", 400
    with open(WORKFLOW_FILE, "r", encoding="utf-8") as f:
        workflow = json.load(f)

    # c·∫≠p nh·∫≠t step restart_after.url
    for step in workflow:
        if step.get("action") == "restart_after":
            step["url"] = url

    # c·∫≠p nh·∫≠t step input_text.text
    updated = False
    for step in workflow:
        if step.get("action") == "input_text":
            step["text"] = so_luong
            updated = True
            break

    # n·∫øu kh√¥ng c√≥ input_text th√¨ th√™m v√†o tr∆∞·ªõc restart_after
    if not updated:
        for idx, step in enumerate(workflow):
            if step.get("action") == "restart_after":
                workflow.insert(idx, {"action": "input_text", "text": so_luong})
                break

    # ghi l·∫°i file
    with open(WORKFLOW_FILE, "w", encoding="utf-8") as f:
        json.dump(workflow, f, ensure_ascii=False, indent=2)

    return redirect("/")


@app.route("/start", methods=["POST"])
def start():
    if not os.path.exists(WORKFLOW_FILE):
        return jsonify({"result": "‚ùå workflow.json ch∆∞a c√≥"}), 400
    result = run_from_json(WORKFLOW_FILE)
    return jsonify({"result": result})


if __name__ == "__main__":
    app.run(port=5000)
